int* find(int num)
{
  ListNode* ptr = head;

  while(ptr && ptr->data != num)
  {
    ptr = ptr->next;
  }

  if(ptr)
    return &ptr->data;
}

for (ptr = head; ptr && ptr->data != num; ptr = ptr->next)

---

ListNode *ptr, *prev = NULL;

for (ptr = head; ptr && ptr->data < num; ptr = ptr->next)

  if (prev)
    prev->next =  new ListNode(num, ptr);
  else
    head = new ListNode(num, ptr);

for (ptr = head; ptr && ptr->data < num; ptr = ptr->next)
  prev = ptr;

  if (!ptr || ptr->data != num)
    return;

  if (prev)
    prev->next = ptr->next;

  else
    head = ptr->next;
  delete ptr;
}

Doubly linked list

class ListNode
{

  int data;
  ListNode* prior;
  ListNode* next;

}

void insert()
{

  [insert for loop here]

    if (prev)
    {
      prev->next = new ListNode(num, ptr);
      if (ptr)
        ptr->prior = prev->next;
    }
    else
      head = new ListNode(num, prev, ptr);
      if (ptr)
        ptr->prior = head;

}
